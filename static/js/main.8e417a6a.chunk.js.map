{"version":3,"sources":["actions/index.js","actions/types.js","components/TextEditor.js","components/Fab/Fab.js","components/pages/Home.js","components/pages/About.js","App.js","serviceWorker.js","reducers/placeHolderReducer.js","reducers/fabReducer.js","reducers/index.js","index.js"],"names":["handleFabIcon","icon","type","payload","TextEditor","onChange","editorState","setState","handleClick","console","log","props","handlePlaceHolder","textInput","current","focus","handleKeyCommand","command","newState","RichUtils","state","onUnderlineClick","toggleInlineStyle","onToggleCode","toggleCode","EditorState","createEmpty","React","createRef","className","onClick","this","placeholder","placeHolder","ref","Component","connect","placeHolderShow","placeHolderPresent","Fab","class","disabled","fabIcon","faClipboard","faChevronLeft","faInfo","size","fab","Home","About","App","path","exact","component","Boolean","window","location","hostname","match","INTIAL_STATE","combineReducers","action","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducers","applyMiddleware","reduxThunk","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8e417a6a.chunk.js","sourcesContent":["import { PLACE_HOLDER_SHOW, FAB_ICON } from \"./types\";\r\nimport {\r\n  Editor,\r\n  EditorState,\r\n  convertToRaw,\r\n  convertFromRaw,\r\n  ContentState,\r\n} from \"draft-js\";\r\nimport { text } from \"@fortawesome/fontawesome-svg-core\";\r\n\r\n// Placeholder actions\r\nexport const handlePlaceHolder = (placeHolderPresent) => {\r\n  return {\r\n    type: PLACE_HOLDER_SHOW,\r\n    payload: placeHolderPresent,\r\n  };\r\n};\r\n// End of Placeholder actions\r\n\r\n// Fab actions\r\nexport const handleFabIcon = (icon) => {\r\n  return {\r\n    type: FAB_ICON,\r\n    payload: icon,\r\n  };\r\n};\r\n// End of Fab actions\r\n","// Editor\r\nexport const EDITOR_TEXT = \"EDITOR_TEXT\";\r\nexport const EDITOR_WITHOUT_TEXT = \"EDITOR_WITHOUT_TEXT\";\r\n\r\n// Fab\r\nexport const FAB_ICON = \"FAB_ICON\";\r\n\r\n// Placeholder\r\nexport const PLACE_HOLDER_SHOW = \"PLACE_HOLDER_SHOW\";\r\n","import React, { Component } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport { Editor, EditorState, RichUtils } from 'draft-js';\r\n// import Fab from './Fab/Fab';\r\n// import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\n// import { faUnderline, faCode } from '@fortawesome/free-solid-svg-icons'\r\nimport { handlePlaceHolder, handleFabIcon } from './../actions'\r\nimport './TextEditor.scss';\r\n\r\nclass TextEditor extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      editorState: EditorState.createEmpty(),\r\n    };\r\n    this.textInput = React.createRef();\r\n  }\r\n\r\n  componentDidMount() {\r\n\r\n  }\r\n\r\n  onChange = (editorState) => {\r\n    this.setState({ editorState });\r\n  };\r\n\r\n  handleClick = () => {\r\n    console.log(\"handleClick ran!\");\r\n    this.props.handlePlaceHolder(false);\r\n    this.props.handleFabIcon('clipboard');\r\n    this.textInput.current.focus();\r\n    // document.getElementsByClassName(\"editorCoontainer\").focus();\r\n  };\r\n  \r\n  handleKeyCommand = (command) => {\r\n    const newState = RichUtils.handleKeyCommand(this.state.editorState, command);\r\n\r\n    if (newState) {\r\n      this.onChange(newState);\r\n      return 'handled';\r\n    }\r\n\r\n    return 'not-handled';\r\n  }\r\n\r\n  onUnderlineClick = () => {\r\n    this.onChange(RichUtils.toggleInlineStyle(this.state.editorState, 'UNDERLINE'));\r\n  }\r\n\r\n  onToggleCode = () => {\r\n    this.onChange(RichUtils.toggleCode(this.state.editorState));\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className='editorCoontainer' onClick={this.handleClick}>\r\n        {/* <h1>Better Letter</h1> */}\r\n        {/* <button onClick={this.onUnderlineClick}><FontAwesomeIcon icon={faUnderline} /> Underline</button>\r\n        <button onClick={this.onToggleCode}><FontAwesomeIcon icon={faCode} /> Code Block</button> */}\r\n        <Editor\r\n          editorState={this.state.editorState}\r\n          placeholder={this.props.placeHolder ? '|  Tap anywhere' : ''}\r\n          handleKeyCommand={this.handleKeyCommand}\r\n          onChange={this.onChange}\r\n          ref={this.textInput}\r\n        />\r\n        {/* <Fab /> */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// export default TextEditor;\r\n\r\nconst mapStateToProps = state => ({\r\n  placeHolder: state.placeHolder.placeHolderShow\r\n});\r\n\r\nexport default connect(mapStateToProps, { handlePlaceHolder, handleFabIcon })(\r\n  TextEditor\r\n);","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faInfo, faClipboard ,faShare, faChevronLeft } from \"@fortawesome/free-solid-svg-icons\";\r\n// import { Route, Switch } from './node_modules/react-router-dom';\r\n// import InfoModal from './../../components/InfoModal/InfoModal';\r\nimport \"./Fab.scss\";\r\nimport { handleFabIcon } from './../../actions'\r\n\r\nclass Fab extends Component {\r\n  //   <Switch>\r\n  //      <Route exact path=\"/\" component={InfoModal} />\r\n  //   </Switch>\r\n  render() {\r\n    return (\r\n      <>\r\n        <div class=\"fabContainer\">\r\n          <button disabled class=\"infoFabButton\">\r\n            <FontAwesomeIcon className=\"icon\" \r\n                icon = {\r\n                this.props.fabIcon == 'clipboard' ? faClipboard :\r\n                this.props.fabIcon == 'back' ? faChevronLeft : \r\n                faInfo } \r\n                size=\"xs\" />\r\n          </button>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    fabIcon: state.fab.fabIcon,\r\n});\r\n\r\nexport default connect(mapStateToProps, { handleFabIcon })(Fab);","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport TextEditor from \"./../TextEditor\";\r\nimport Fab from \"./../Fab/Fab\";\r\n\r\nclass Home extends Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <TextEditor />\r\n        <Fab />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({});\r\n\r\nexport default connect(mapStateToProps, {})(Home);\r\n","import React, { Component } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport Fab from \"./../Fab/Fab\";\r\nimport \"./About.scss\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction About() {\r\n  return (\r\n    <>\r\n      <div className=\"aboutContainer\">\r\n        <div className=\"aboutContent\">\r\n          <div>\r\n            <p>\r\n              Better Letter is a simple, mobile-optimized text editor for the\r\n              web.\r\n            </p>\r\n            <p>Type distraction free and then move your text to other apps.</p>\r\n          </div>\r\n          <div>\r\n            <p className=\"authors\">Made by:</p>\r\n            <p className=\"authors\">Jonathan and Theo Basallaje</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <Fab />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default About;\r\n","import React, { Component } from \"react\";\r\nimport { HashRouter as Router, Route, Redirect } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport Home from \"./components/pages/Home\";\r\nimport About from \"./components/pages/About\";\r\n\r\nimport \"./App.scss\";\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <Router>\r\n          <Route path=\"/\" exact component={Home} />\r\n          <Route path=\"/about\" component={About} />\r\n        </Router>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({});\r\n\r\nexport default connect(mapStateToProps, {})(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { PLACE_HOLDER_SHOW } from '../actions/types';\r\n\r\nconst INTIAL_STATE = {\r\n  placeHolderShow: true,\r\n};\r\n\r\nexport default (state = INTIAL_STATE, action) => {\r\n  switch (action.type) {\r\n    case PLACE_HOLDER_SHOW:\r\n      return { ...state, placeHolderShow: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { FAB_ICON } from '../actions/types';\r\n\r\nconst INTIAL_STATE = {\r\n  fabIcon: ''\r\n};\r\n\r\nexport default (state = INTIAL_STATE, action) => {\r\n  switch (action.type) {\r\n    case FAB_ICON:\r\n      return { ...state, fabIcon: action.payload };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import { combineReducers } from \"redux\";\r\nimport placeHolderReducer from './placeHolderReducer'\r\nimport fabReducer from './fabReducer';\r\n\r\nexport default combineReducers({\r\n    placeHolder: placeHolderReducer,\r\n    fab: fabReducer,\r\n});\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n// Redux Setup \r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware, compose } from 'redux';\r\nimport reduxThunk from 'redux-thunk';\r\n// Reducers\r\nimport reducers from './reducers';\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n\r\n// Redux Dev Tool\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n//Creating Centreal Store for State\r\nconst store = createStore(\r\n  reducers,\r\n  composeEnhancers(applyMiddleware(reduxThunk))\r\n);\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>\r\n  , document.getElementById('root'));"],"sourceRoot":""}